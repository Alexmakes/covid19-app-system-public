
plugins {
    id "org.jetbrains.kotlin.jvm"
    id "com.adarshr.test-logger"
}

group = 'com.demo'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'
configurations.testImplementation.canBeResolved = true

dependencies {
    implementation project(":infra")

    implementation "com.amazonaws:aws-java-sdk-kms"
    implementation "com.amazonaws:aws-java-sdk-cloudfront"
    implementation "com.amazonaws:aws-java-sdk-logs"
    implementation "com.amazonaws:aws-java-sdk-secretsmanager"
    implementation "com.amazonaws:aws-java-sdk-ssm"
    implementation "com.amazonaws:aws-java-sdk-sns"
    implementation "com.amazonaws:aws-java-sdk-dynamodb"
    implementation "com.amazonaws:aws-java-sdk-kinesis"
    implementation "com.amazonaws:aws-java-sdk-athena"
    implementation "com.amazonaws:aws-java-sdk-sqs"

    implementation platform("com.amazonaws:aws-xray-recorder-sdk-bom:$aws_xray_version")
    implementation "com.amazonaws:aws-xray-recorder-sdk-core"
    implementation "com.amazonaws:aws-xray-recorder-sdk-aws-sdk-core"
    implementation "com.amazonaws:aws-xray-recorder-sdk-aws-sdk"
    implementation "com.amazonaws:aws-xray-recorder-sdk-aws-sdk-instrumentor"

    implementation "com.github.ben-manes.caffeine:caffeine:2.8.8"

    implementation platform("com.google.protobuf:protobuf-bom:3.12.2")
    implementation "com.google.protobuf:protobuf-java"

    implementation "at.favre.lib:bcrypt:0.9.0"

    implementation platform("com.fasterxml.jackson:jackson-bom:$jackson_version")
    implementation "com.fasterxml.jackson.core:jackson-databind"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"

    implementation "com.beust:jcommander:1.78"
    implementation "javax.xml.bind:jaxb-api:2.1"
    implementation "net.lingala.zip4j:zip4j:2.7.0"
    implementation "org.apache.commons:commons-csv:1.8"

    testImplementation "com.amazonaws:DynamoDBLocal:1.13.5"

    testImplementation platform("software.amazon.awssdk:bom:${aws_sdk2_version}")
    testImplementation "software.amazon.awssdk:lambda"
    testImplementation "software.amazon.awssdk:athena"

    testImplementation "org.http4k:http4k-aws"
    testImplementation "org.http4k:http4k-testing-servirtium"
    testImplementation "org.http4k:http4k-resilience4j"

    testImplementation "com.fasterxml.jackson.dataformat:jackson-dataformat-xml"

    testImplementation "io.mockk:mockk:1.10.2"
    testImplementation "org.apache.commons:commons-lang3:3.11"

    testImplementation "org.bitbucket.b_c:jose4j:0.7.2"

    testImplementation "org.bouncycastle:bcpkix-jdk15on:1.68"
    testImplementation "org.bouncycastle:bcprov-ext-jdk15on:1.68"

    testImplementation "com.github.tomakehurst:wiremock-jre8:2.27.2"

    testApi project(path: ":infra", configuration: 'testArtifacts')
}

task copyNativeDependencies(type: Copy) {
    from(configurations.testImplementation) {
        include '*.dll'
        include '*.dylib'
        include '*.so'
    }
    into 'build/libs'
}

test {

    filter {
        includeTestsMatching "*Test"
        excludeTestsMatching "smoke.*"
        excludeTestsMatching "contract.*"
        excludeTestsMatching "db.*"
    }

    dependsOn copyNativeDependencies

    test.doFirst {
        systemProperty "java.library.path", 'build/libs'
    }

}

task testSmokeParallel(type: Test) {
    useJUnitPlatform{
        excludeTags 'serial'
    }

    description = 'Runs parallel smoke tests.'
    group = 'verification'

    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1

    filter {
        includeTestsMatching "smoke.*Test"
    }

    reports.html.destination = file("$projectDir/../../../../out/reports")
    reports.junitXml.destination = file("$projectDir/../../../../out/reports")
}

task testSmokeSerial(type: Test) {
    useJUnitPlatform{
        includeTags 'serial'
    }

    description = 'Runs serial smoke tests.'
    group = 'verification'

    filter {
        includeTestsMatching "smoke.*Test"
    }

    // include serial tags
    mustRunAfter(testSmokeParallel)

    reports.html.destination = file("$projectDir/../../../../out/reports")
    reports.junitXml.destination = file("$projectDir/../../../../out/reports")
}

task testSmoke(type: Test) {
    dependsOn(testSmokeParallel)
    dependsOn(testSmokeSerial)
}

task generateSignature(type: JavaExec) {
    group = "Execution"
    description = "Generate signature for some file"
    classpath = sourceSets.main.runtimeClasspath
    main = "uk.nhs.nhsx.core.signature.DistributionSignatureMain"
    args System.getProperty("sign.args", "").split()
}

task exploreExportFile(type: JavaExec) {
    group = "Execution"
    description = "Explore export.bin in working directory"
    classpath = sourceSets.main.runtimeClasspath
    main = "uk.nhs.nhsx.diagnosiskeydist.ExportFileExplorer"
    args System.getProperty("explore.args", "").split()
}
